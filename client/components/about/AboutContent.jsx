// @flow

import React from "react";

// контентный блок, форматирование в котором производится по тегам
const AboutContent = () => (
	<section className="about">
		<div className="about__inner">
			<p>
				Данный проект практически не задействует сторонних библиотек, за
				исключением слайдера и input type="range"!
			</p>

			<h3>Адаптивность </h3>
			<p>
				Тут и так все понятно. Поведение на различных вьюпортах
				предусмотрено. Сетка ведет себя плавно при переходах через
				десктопные брейкпоинты! (все рассчитано)
			</p>

			<h3>Доступность </h3>
			<p>
				Сайт сверстан сематично. Все ссылки имеют название, все иконки
				имеют альтернативную подпись, можно выстроить логичную модель
				документа
			</p>
			<p>
				Чтобы сделать сайт полностью доступным для навигации с
				клавиатуры, требуются некоторые доработки (в частности, при
				навигации табом не видно выделения кнопки открытия меню на
				мобильной версии, такие баги мне известны). Тем не менее,
				элементы спратаны доступным способом, навигация возможна и
				видна, кнопки нажимаются пробелом, а по ссылкам можно перейти
				Enter'ом
			</p>

			<p />
			<h3>Совместимость </h3>
			<p>
				Проект поддерживает все современные браузеры (по крайней мере, 2
				последних версии), при этом поддержка IE 11 и Edge изначально не
				была гарантирована. Тем не менее, с сайтом можно работать на
				IE11, а Edge ведет себя именно так, как нужно. В обоих браузерах
				от Microsoft отключен параллакс. (решение о присваивании body
				класса MS происходит на сервере) <br />
				Сайт отлично работает на мобильном Safari
			</p>

			<h3>Оптимизация </h3>
			<p>
				<b>Скорость загрузки:</b> Для этого в первую очередь был сделан
				SSR. При формировании ответа сервер пытается предусмотреть, кто
				запрашивает ресурс, помещая тяжелые изображения нужного формата
				в preload. Изображения примерно сбалансированы по качеству-весу,
				использован picture, webp в хроме.<br /> Самые нужные
				предскрипты приезжают вместе с html, отключаясь после rehydrate
				с реактом.
			</p>
			<p>
				<b>Производительность:</b> Pure Component используется довольно
				часто, чтобы избежать множества перерисовок. Количество
				резиновых компонентов в продакшн было сокращено до самых главных
				и эффектных, чтобы избежать проседания fps.
				<br /> Параллакс, безусловно, съедает большую часть ресурсов,
				поэтому он включен только на мощных десктопных бразерах. К
				сожалению, попытка реализовать параллакс вместо стилей
				скриптами(которые зачастую хорошо оптимизированы) приведет к
				тому, что параллакс не будет работать до момента, когда подъедет
				бандл.
			</p>

			<h3>SSR и отказоустойчивость</h3>
			<p>
				Прежде всего, нужен для скорости, затем - как fallback. Сайт
				полностью рабочий без JS, включая бургер-меню на мобильном
				вьюпорте (меню с кликабельным оверлеем реализовано на чистом
				CSS). Параллакс - на чистом CSS. Google-карта в виде картинки
				визуально неотличима. Мобильный прайс-слайдер реализован простой
				горизонтальной прокруткой. Все это означает, что сайт
				практически идентично выглядит со скриптами и без скриптов (при
				отлюченных и в то время, когда грузится бандл). Отключены при
				этом лишь компоненты, без JS не существующие - slick слайдер,
				фильтр.
			</p>
			<p>
				На странице форм - пока скрипт не приехал, уже работает
				предскрипт, сохраняющий значения форм в localStorage, чтобы без
				багов смерджить хранилище при rehydrate. Если JS нет вообще,
				форма работает по умолчанию, используя браузерную валидацию.
			</p>
			<p>
				Формирование страницы на сервере позволяет кастомизировать
				страницу, присвоить нужные классы и определить нужные ресурсы
				заранее, исходя из данных о User-Agent (что открывает,
				вообще-то, кучу возможностей в плане целевой стилизации)
			</p>
			<p>
				AJAX-запросы клиентское приложение делает к рендерящему серверу,
				который перенаправляет их к API-серверу*.
			</p>
			<p>*Никакие post-запросы не разрешены, они только эмулируются</p>
			<h3>Формы</h3>
			<p>
				Моя гордость - самостоятельно написанная технология валидации
				формы на лету с сохранением данных в store, а хранилища - в
				localStorage. Это позволит продолжить введение данных в случае
				переключения на другую вкладку и даже закрытия приложения.
			</p>
			<p>
				Процесс валидации оптимизирован в плане производительности - для
				сохранения и валидации всей формы применен дебаунс, чтобы
				избежать перерисовки всей страницы в процессе печати.
			</p>
			<p>
				Валидация отдельного пункта меню происходит постоянно, но
				компонент не надоедает сообщением после каждого ввода - только,
				если пользователь остановился, введя неверное значение. Как
				только ошибка исправлена - сообщение исчезает мгновенно. (тоже
				выборочный дебаунс)
			</p>
			<p>
				Страница не позволяет даже нажать кнопку отправки, пока хоть
				что-то невалидно (на мой взгляд, идеальный UI). Данное поведение
				включает только реакт после его активации на клиенте,
				разумеется.
			</p>
			<p />
			<h3>Галерея</h3>
			<p>
				Галерея подгружается с помощью, конечно же, AJAX, когда работает
				реакт-приложение. Изначально с сервера страница галереи
				приезжает уже отрисованная с первой порцией фотографий, если
				роутер клиентский - делается Ajax-запрос
			</p>
		</div>
	</section>
);
export default AboutContent;
